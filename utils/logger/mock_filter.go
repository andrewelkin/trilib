// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andrewelkin/trilib/utils/logger (interfaces: FilterObject)

// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilterObject is a mock of FilterObject interface.
type MockFilterObject struct {
	ctrl     *gomock.Controller
	recorder *MockFilterObjectMockRecorder
}

// MockFilterObjectMockRecorder is the mock recorder for MockFilterObject.
type MockFilterObjectMockRecorder struct {
	mock *MockFilterObject
}

// NewMockFilterObject creates a new mock instance.
func NewMockFilterObject(ctrl *gomock.Controller) *MockFilterObject {
	mock := &MockFilterObject{ctrl: ctrl}
	mock.recorder = &MockFilterObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterObject) EXPECT() *MockFilterObjectMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockFilterObject) Filter(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockFilterObjectMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockFilterObject)(nil).Filter), arg0)
}
